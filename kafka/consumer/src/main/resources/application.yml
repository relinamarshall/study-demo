spring:
  kafka:
    bootstrap-servers: yifan4:9092,yifan5:9092,yifan6:9092
    consumer:
      # 消费者组
      group-id: test-consumer-group
      # 关闭自动提交 默认是true
      enable-auto-commit: false
      # 设置自动提交频率
      # auto-commit-interval:
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset
      # latest:重置为分区中最新的offset(消费分区中新产生的数据)
      # none:只要有一个分区不存在已提交的offset,就抛出异常
      # 当各分区下有已提交的offset时 从提交的offset开始消费;无提交的offset时,从头开始消费
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 批量消费最大数量
      max-poll-records: 10
      properties:
        interceptor:
          classes: demo.kafka.consumer.interceptor.DiyConsumerInterceptor
        session:
          timeout:
            # session 超时, 超过这个时间consumer没有发送心跳 就会触发 rebalance 操作
            ms: 120000
          request:
            timeout:
              # 请求超时
              ms: 120000
    listener:
      # RECORD:当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
      # BATCH:当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
      # TIME:当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交
      # COUNT:当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
      # COUNT_TIME:TIME |　COUNT　有一个条件满足时提交
      # MANUAL:当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交
      # MANUAL_IMMEDIATE:手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种
      ack-mode: manual_immediate
      # 设置是否批量消费 默认single(单条) batch(批量)
      type: batch